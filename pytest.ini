[pytest]
minversion = 7.0
testpaths = tests
python_files = test_*.py
python_classes =
python_functions = test_*

# Asyncio configuration
# asyncio_mode = auto  # Disabled - pytest-asyncio plugin not installed

# Basic pytest settings
addopts =
    -ra
    --strict-markers
    --strict-config
    -v
    --tb=short
    --import-mode=importlib
    --durations=10
    # Coverage settings (will be enabled when pytest-cov is installed)
    # --cov=d_fake_seeder
    # --cov-report=term-missing
    # --cov-report=html:htmlcov
    # --cov-fail-under=100

# Warning filters
filterwarnings =
    # Ignore Python 3.13 event loop cleanup warnings in integration tests
    ignore::pytest.PytestUnraisableExceptionWarning
    # Ignore resource warnings from async event loops
    ignore::ResourceWarning
    # Ignore specific event loop attribute errors (Python 3.13 compatibility)
    ignore:.*_UnixSelectorEventLoop.*:RuntimeWarning
    # Ignore async test warnings from skipped tests without pytest-asyncio
    ignore::pytest.PytestUnhandledCoroutineWarning
    # Ignore thread exception warnings from intentional test scenarios
    ignore::pytest.PytestUnhandledThreadExceptionWarning
    # Ignore coroutine warnings from mock cleanup
    ignore:coroutine.*was never awaited:RuntimeWarning
    # Ignore PyGI warnings from external libraries and import-time side effects
    ignore:.*was imported without specifying a version.*:Warning
    ignore:GdkX11 was imported without specifying a version.*:Warning
    ignore:Gtk was imported without specifying a version.*:Warning
    ignore:Adw was imported without specifying a version.*:Warning

# Test markers
markers =
    unit: Unit tests (fast, isolated, <100ms)
    integration: Integration tests (slower, multi-component, explicit timeout)
    slow: Tests that take >1 second
    network: Tests requiring network mocking
    ui: Tests involving GTK UI component logic (not rendering)
    async: Tests using asyncio
    asyncio: Tests using asyncio (pytest-asyncio marker)
    timeout: Test timeout marker
    anyio: Tests using anyio (pytest-anyio marker)
    gtk3: Tests requiring GTK3 (run in separate process to avoid GTK4 conflicts)
    forked: Tests that must run in a forked subprocess (pytest-forked marker)

# Randomize test order to catch hidden dependencies
# Use --randomly-seed=<number> to reproduce specific test order

# Note: Timeout settings removed - use @pytest.mark.timeout(seconds) on individual tests instead
# Note: asyncio_mode removed - pytest-asyncio plugin not installed, asyncio handled via fixtures
